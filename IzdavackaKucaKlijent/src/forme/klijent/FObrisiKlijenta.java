/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package forme.klijent;

import domen.Klijent;
import forme.klijent.ki.KontrolerKiObrisiKlijenta;
import forme.klijent.ki.KontrolerKiVratiKlijente;
import forme.klijent.model.KlijentModelTabele;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import konstante.Konstante;
import sesija.Sesija;
import transfer.KlijentTransferObjekat;
import transfer.ServerTransferObjekat;

/**
 *
 * @author miljan
 */
public class FObrisiKlijenta extends javax.swing.JDialog {

    /**
     * Creates new form FObrisiKlijenta
     */
    public FObrisiKlijenta(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
       // ucitajComboBox();
        //srediTabelu();
        KontrolerKiVratiKlijente.vratiKlijente(jtblKlijenti, cmbKlijenti);
        jtblKlijenti.setRowSelectionInterval(0, 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnObrisiKlijenta = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtblKlijenti = new javax.swing.JTable();
        cmbKlijenti = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnObrisiKlijenta.setText("Obrisi Klijenta");
        btnObrisiKlijenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiKlijentaActionPerformed(evt);
            }
        });

        jtblKlijenti.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtblKlijenti.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jtblKlijentiMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jtblKlijenti);

        cmbKlijenti.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbKlijentiItemStateChanged(evt);
            }
        });

        jLabel1.setText("Obrisi klijenta");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(cmbKlijenti, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(93, 93, 93)
                                .addComponent(btnObrisiKlijenta, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jLabel1)))
                        .addGap(0, 42, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnObrisiKlijenta)
                    .addComponent(cmbKlijenti, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnObrisiKlijentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiKlijentaActionPerformed
      /* try{
        //posalji podatke serveru   
        Klijent klijent=(Klijent) cmbKlijenti.getSelectedItem();
        ObjectOutputStream out=new ObjectOutputStream(Sesija.dajObjekat().getSoket().getOutputStream());
        KlijentTransferObjekat kto= new KlijentTransferObjekat();
        kto.setOperacija(Konstante.Obrisi_Klijenta);
        kto.setPodaci(klijent);
        out.writeObject(kto);
        
        //primi podatke od servera
        ObjectInputStream in=new ObjectInputStream(Sesija.dajObjekat().getSoket().getInputStream());
       ServerTransferObjekat sto= (ServerTransferObjekat) in.readObject();
       JOptionPane.showMessageDialog(this, sto.getPoruka());
       
       
        KlijentModelTabele kmt=(KlijentModelTabele) jtblKlijenti.getModel();
        kmt.obrisiKlijenta(cmbKlijenti.getSelectedIndex());
        
                
       }catch(Exception ex){
           
       }  
       */
        KontrolerKiObrisiKlijenta.obrisiKlijenta(cmbKlijenti, jtblKlijenti);
       
    }//GEN-LAST:event_btnObrisiKlijentaActionPerformed

    private void cmbKlijentiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbKlijentiItemStateChanged
        jtblKlijenti.setRowSelectionInterval(cmbKlijenti.getSelectedIndex(), cmbKlijenti.getSelectedIndex());
    }//GEN-LAST:event_cmbKlijentiItemStateChanged

    private void jtblKlijentiMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtblKlijentiMousePressed
        cmbKlijenti.setSelectedIndex(jtblKlijenti.getSelectedRow());
    }//GEN-LAST:event_jtblKlijentiMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FObrisiKlijenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FObrisiKlijenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FObrisiKlijenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FObrisiKlijenta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FObrisiKlijenta dialog = new FObrisiKlijenta(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnObrisiKlijenta;
    private javax.swing.JComboBox cmbKlijenti;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jtblKlijenti;
    // End of variables declaration//GEN-END:variables

    private void ucitajComboBox() {
        try{
            //posalji podatke serveru
            ObjectOutputStream out =new ObjectOutputStream(Sesija.dajObjekat().getSoket().getOutputStream());
            KlijentTransferObjekat kto=new KlijentTransferObjekat();
            kto.setOperacija(Konstante.Vrati_Klijenta);
            out.writeObject(kto);
            
            //primi podatke od servera
            ObjectInputStream in=new ObjectInputStream(Sesija.dajObjekat().getSoket().getInputStream());
            ServerTransferObjekat sto=(ServerTransferObjekat) in.readObject();
            ArrayList<Klijent>listaKlijenata=(ArrayList<Klijent>) sto.getPodaci();
            
            for (Klijent klijent : listaKlijenata) {
                cmbKlijenti.addItem(klijent);
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(rootPane, "Greska pri vracanju klijenata iz baze");
        }
    }

    private void srediTabelu() {
        try{
            //posalji podatke serveru
            ObjectOutputStream out=new ObjectOutputStream(Sesija.dajObjekat().getSoket().getOutputStream());
            KlijentTransferObjekat kto=new KlijentTransferObjekat();
            kto.setOperacija(Konstante.Vrati_Klijenta);
            out.writeObject(kto);
                   
            //primi podatke od servera
            ObjectInputStream in=new ObjectInputStream(Sesija.dajObjekat().getSoket().getInputStream());
            ServerTransferObjekat sto=(ServerTransferObjekat) in.readObject();
            
            ArrayList<Klijent>listaKlijenata=(ArrayList<Klijent>) sto.getPodaci();
            KlijentModelTabele kmt=new KlijentModelTabele(listaKlijenata);
            jtblKlijenti.setModel(kmt);
        }catch(Exception ex){
            JOptionPane.showMessageDialog(rootPane, "Greska");
        }
    }
}
